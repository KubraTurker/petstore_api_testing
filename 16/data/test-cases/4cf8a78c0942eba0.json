{"uid":"4cf8a78c0942eba0","name":"Delete a pet","fullName":"tests.test_petstore.test_pet.TestPet#test_delete_pet","historyId":"e56160857602be422ddd49a7cae35000","time":{"start":1744126451826,"stop":1744126455162,"duration":3336},"description":"\n        Test for deleting a pet.\n        Steps:\n            1. Create a new pet object.\n            2. Add pet to the store.\n            3. Delete the pet using its ID.\n            4. Try to retrieve the pet by ID.\n            5. Assert that the response status code for deletion is 200.\n            6. Assert that retrieving the pet after deletion returns a 404.\n        ","descriptionHtml":"<pre><code>    Test for deleting a pet.\n    Steps:\n        1. Create a new pet object.\n        2. Add pet to the store.\n        3. Delete the pet using its ID.\n        4. Try to retrieve the pet by ID.\n        5. Assert that the response status code for deletion is 200.\n        6. Assert that retrieving the pet after deletion returns a 404.\n</code></pre>\n","status":"failed","statusMessage":"AssertionError: Delete request failed\nassert 404 == 200\n +  where 404 = <Response [404]>.status_code","statusTrace":"self = <test_pet.TestPet object at 0x7f354f02ec10>\napp = <fixtures.app.Application object at 0x7f354f03e550>\n\n    @pytest.mark.positive\n    @allure.story(\"Delete Pets\")\n    @allure.title(\"Delete a pet\")\n    def test_delete_pet(self, app):\n        \"\"\"\n        Test for deleting a pet.\n        Steps:\n            1. Create a new pet object.\n            2. Add pet to the store.\n            3. Delete the pet using its ID.\n            4. Try to retrieve the pet by ID.\n            5. Assert that the response status code for deletion is 200.\n            6. Assert that retrieving the pet after deletion returns a 404.\n        \"\"\"\n        with allure.step(\"Create and add a new pet\"):\n            data = Pet.random()\n            res_add = app.pet_api.add_pet(data=data, type_response=Pet)\n            assert res_add.status_code == 200\n            allure.attach(\n                str(res_add.data.__dict__),\n                \"Created Pet Data\",\n                allure.attachment_type.TEXT,\n            )\n    \n        with allure.step(\"Wait for the pet to be fully created\"):\n            time.sleep(3)\n    \n        with allure.step(f\"Delete pet with ID {res_add.data.id}\"):\n            res_delete = app.pet_api.delete_pet(pet_id=res_add.data.id)\n>           assert res_delete.status_code == 200, \"Delete request failed\"\nE           AssertionError: Delete request failed\nE           assert 404 == 200\nE            +  where 404 = <Response [404]>.status_code\n\ntests/test_petstore/test_pet.py:251: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_session_faker","time":{"start":1744126436038,"stop":1744126436039,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"app","time":{"start":1744126436039,"stop":1744126436039,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"description":"\n        Test for deleting a pet.\n        Steps:\n            1. Create a new pet object.\n            2. Add pet to the store.\n            3. Delete the pet using its ID.\n            4. Try to retrieve the pet by ID.\n            5. Assert that the response status code for deletion is 200.\n            6. Assert that retrieving the pet after deletion returns a 404.\n        ","status":"failed","statusMessage":"AssertionError: Delete request failed\nassert 404 == 200\n +  where 404 = <Response [404]>.status_code","statusTrace":"self = <test_pet.TestPet object at 0x7f354f02ec10>\napp = <fixtures.app.Application object at 0x7f354f03e550>\n\n    @pytest.mark.positive\n    @allure.story(\"Delete Pets\")\n    @allure.title(\"Delete a pet\")\n    def test_delete_pet(self, app):\n        \"\"\"\n        Test for deleting a pet.\n        Steps:\n            1. Create a new pet object.\n            2. Add pet to the store.\n            3. Delete the pet using its ID.\n            4. Try to retrieve the pet by ID.\n            5. Assert that the response status code for deletion is 200.\n            6. Assert that retrieving the pet after deletion returns a 404.\n        \"\"\"\n        with allure.step(\"Create and add a new pet\"):\n            data = Pet.random()\n            res_add = app.pet_api.add_pet(data=data, type_response=Pet)\n            assert res_add.status_code == 200\n            allure.attach(\n                str(res_add.data.__dict__),\n                \"Created Pet Data\",\n                allure.attachment_type.TEXT,\n            )\n    \n        with allure.step(\"Wait for the pet to be fully created\"):\n            time.sleep(3)\n    \n        with allure.step(f\"Delete pet with ID {res_add.data.id}\"):\n            res_delete = app.pet_api.delete_pet(pet_id=res_add.data.id)\n>           assert res_delete.status_code == 200, \"Delete request failed\"\nE           AssertionError: Delete request failed\nE           assert 404 == 200\nE            +  where 404 = <Response [404]>.status_code\n\ntests/test_petstore/test_pet.py:251: AssertionError","steps":[{"name":"Create and add a new pet","time":{"start":1744126451826,"stop":1744126451948,"duration":122},"status":"passed","steps":[],"attachments":[{"uid":"24e9649ac13537c6","name":"Created Pet Data","source":"24e9649ac13537c6.txt","type":"text/plain","size":169}],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},{"name":"Wait for the pet to be fully created","time":{"start":1744126451948,"stop":1744126454951,"duration":3003},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"Delete pet with ID 9223372036854750456","time":{"start":1744126454951,"stop":1744126455162,"duration":211},"status":"failed","statusMessage":"AssertionError: Delete request failed\nassert 404 == 200\n +  where 404 = <Response [404]>.status_code\n","statusTrace":"  File \"/home/runner/work/petstore_api_testing/petstore_api_testing/tests/test_petstore/test_pet.py\", line 251, in test_delete_pet\n    assert res_delete.status_code == 200, \"Delete request failed\"\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[{"uid":"ae9e5e054003c2f7","name":"log","source":"ae9e5e054003c2f7.txt","type":"text/plain","size":971}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":3,"attachmentsCount":2,"hasContent":true,"attachmentStep":false},"afterStages":[],"labels":[{"name":"epic","value":"Pet Store API"},{"name":"feature","value":"Pet Management"},{"name":"story","value":"Delete Pets"},{"name":"tag","value":"positive"},{"name":"parentSuite","value":"tests.test_petstore"},{"name":"suite","value":"test_pet"},{"name":"subSuite","value":"TestPet"},{"name":"host","value":"fv-az1970-26"},{"name":"thread","value":"2286-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_petstore.test_pet"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"tags":["positive"]},"source":"4cf8a78c0942eba0.json","parameterValues":[]}