{"uid":"2b9d7b67078e77b8","name":"Delete an order","fullName":"tests.test_petstore.test_store.TestStore#test_delete_order","historyId":"36ffe0101c68e3bc5b91e3798268ebd7","time":{"start":1744126465732,"stop":1744126485887,"duration":20155},"description":"\n        Test for deleting an order.\n        Steps:\n            1. Create a new order object.\n            2. Add the order to the store.\n            3. Delete the order.\n            4. Try to retrieve the deleted order by ID.\n            5. Verify that the deletion was successful.\n            6. Confirm that the deleted order no longer exists (should return 404).\n        ","descriptionHtml":"<pre><code>    Test for deleting an order.\n    Steps:\n        1. Create a new order object.\n        2. Add the order to the store.\n        3. Delete the order.\n        4. Try to retrieve the deleted order by ID.\n        5. Verify that the deletion was successful.\n        6. Confirm that the deleted order no longer exists (should return 404).\n</code></pre>\n","status":"failed","statusMessage":"AssertionError: Order still exists after deletion. Returned status code: 200\nassert 200 == 404\n +  where 200 = <Response [200]>.status_code","statusTrace":"self = <test_store.TestStore object at 0x7f354f021610>\napp = <fixtures.app.Application object at 0x7f354f03e550>\n\n    @pytest.mark.positive\n    @allure.story(\"Delete Orders\")\n    @allure.title(\"Delete an order\")\n    def test_delete_order(self, app):\n        \"\"\"\n        Test for deleting an order.\n        Steps:\n            1. Create a new order object.\n            2. Add the order to the store.\n            3. Delete the order.\n            4. Try to retrieve the deleted order by ID.\n            5. Verify that the deletion was successful.\n            6. Confirm that the deleted order no longer exists (should return 404).\n        \"\"\"\n        with allure.step(\"Create and add a new order\"):\n            data = Order.random()\n            allure.attach(\n                str(data.__dict__), \"Order Request Data\", allure.attachment_type.TEXT\n            )\n            res_add = app.store_api.add_order(data=data)\n            assert res_add.status_code == 200  # or 201\n            allure.attach(\n                str(res_add.data.__dict__),\n                \"Created Order Data\",\n                allure.attachment_type.TEXT,\n            )\n    \n        with allure.step(\"Wait for order to be processed\"):\n            time.sleep(5)\n    \n        with allure.step(f\"Delete order with ID {res_add.data.id}\"):\n            res_delete = app.store_api.delete_order(order_id=res_add.data.id)\n            assert res_delete.status_code == 200, \"Deletion failed\"\n            allure.attach(\n                str(res_delete.json()), \"Delete Response\", allure.attachment_type.JSON\n            )\n            logging.info(f\"Delete response: {res_delete.json()}\")\n    \n        with allure.step(\"Attempt to retrieve the deleted order\"):\n            res_get = app.store_api.get_order_by_id(order_id=data.id)\n            allure.attach(\n                str(res_get.status_code),\n                \"Get Deleted Order Status\",\n                allure.attachment_type.TEXT,\n            )\n            time.sleep(10)\n        with allure.step(\"Wait for response processing\"):\n            time.sleep(5)\n    \n        with allure.step(\"Verify order is no longer available\"):\n            if res_get.status_code == 200:\n                logging.warning(\n                    f\"Order still exists after deletion, response: {res_get.json()}\"\n                )\n                allure.attach(\n                    str(res_get.json()),\n                    \"Order Still Exists\",\n                    allure.attachment_type.JSON,\n                )\n    \n>           assert (\n                res_get.status_code == 404\n            ), f\"Order still exists after deletion. Returned status code: {res_get.status_code}\"\nE           AssertionError: Order still exists after deletion. Returned status code: 200\nE           assert 200 == 404\nE            +  where 200 = <Response [200]>.status_code\n\ntests/test_petstore/test_store.py:196: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_session_faker","time":{"start":1744126436038,"stop":1744126436039,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"app","time":{"start":1744126436039,"stop":1744126436039,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"description":"\n        Test for deleting an order.\n        Steps:\n            1. Create a new order object.\n            2. Add the order to the store.\n            3. Delete the order.\n            4. Try to retrieve the deleted order by ID.\n            5. Verify that the deletion was successful.\n            6. Confirm that the deleted order no longer exists (should return 404).\n        ","status":"failed","statusMessage":"AssertionError: Order still exists after deletion. Returned status code: 200\nassert 200 == 404\n +  where 200 = <Response [200]>.status_code","statusTrace":"self = <test_store.TestStore object at 0x7f354f021610>\napp = <fixtures.app.Application object at 0x7f354f03e550>\n\n    @pytest.mark.positive\n    @allure.story(\"Delete Orders\")\n    @allure.title(\"Delete an order\")\n    def test_delete_order(self, app):\n        \"\"\"\n        Test for deleting an order.\n        Steps:\n            1. Create a new order object.\n            2. Add the order to the store.\n            3. Delete the order.\n            4. Try to retrieve the deleted order by ID.\n            5. Verify that the deletion was successful.\n            6. Confirm that the deleted order no longer exists (should return 404).\n        \"\"\"\n        with allure.step(\"Create and add a new order\"):\n            data = Order.random()\n            allure.attach(\n                str(data.__dict__), \"Order Request Data\", allure.attachment_type.TEXT\n            )\n            res_add = app.store_api.add_order(data=data)\n            assert res_add.status_code == 200  # or 201\n            allure.attach(\n                str(res_add.data.__dict__),\n                \"Created Order Data\",\n                allure.attachment_type.TEXT,\n            )\n    \n        with allure.step(\"Wait for order to be processed\"):\n            time.sleep(5)\n    \n        with allure.step(f\"Delete order with ID {res_add.data.id}\"):\n            res_delete = app.store_api.delete_order(order_id=res_add.data.id)\n            assert res_delete.status_code == 200, \"Deletion failed\"\n            allure.attach(\n                str(res_delete.json()), \"Delete Response\", allure.attachment_type.JSON\n            )\n            logging.info(f\"Delete response: {res_delete.json()}\")\n    \n        with allure.step(\"Attempt to retrieve the deleted order\"):\n            res_get = app.store_api.get_order_by_id(order_id=data.id)\n            allure.attach(\n                str(res_get.status_code),\n                \"Get Deleted Order Status\",\n                allure.attachment_type.TEXT,\n            )\n            time.sleep(10)\n        with allure.step(\"Wait for response processing\"):\n            time.sleep(5)\n    \n        with allure.step(\"Verify order is no longer available\"):\n            if res_get.status_code == 200:\n                logging.warning(\n                    f\"Order still exists after deletion, response: {res_get.json()}\"\n                )\n                allure.attach(\n                    str(res_get.json()),\n                    \"Order Still Exists\",\n                    allure.attachment_type.JSON,\n                )\n    \n>           assert (\n                res_get.status_code == 404\n            ), f\"Order still exists after deletion. Returned status code: {res_get.status_code}\"\nE           AssertionError: Order still exists after deletion. Returned status code: 200\nE           assert 200 == 404\nE            +  where 200 = <Response [200]>.status_code\n\ntests/test_petstore/test_store.py:196: AssertionError","steps":[{"name":"Create and add a new order","time":{"start":1744126465732,"stop":1744126465781,"duration":49},"status":"passed","steps":[],"attachments":[{"uid":"caba54ef64c87653","name":"Order Request Data","source":"caba54ef64c87653.txt","type":"text/plain","size":125},{"uid":"3ef0cfae4a59d1c3","name":"Created Order Data","source":"3ef0cfae4a59d1c3.txt","type":"text/plain","size":127}],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":2,"hasContent":true,"attachmentStep":false},{"name":"Wait for order to be processed","time":{"start":1744126465781,"stop":1744126470786,"duration":5005},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"Delete order with ID 6791","time":{"start":1744126470786,"stop":1744126470835,"duration":49},"status":"passed","steps":[],"attachments":[{"uid":"b37bb5504f9803f3","name":"Delete Response","source":"b37bb5504f9803f3.json","type":"application/json","size":51}],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},{"name":"Attempt to retrieve the deleted order","time":{"start":1744126470835,"stop":1744126480881,"duration":10046},"status":"passed","steps":[],"attachments":[{"uid":"cba4734752b85920","name":"Get Deleted Order Status","source":"cba4734752b85920.txt","type":"text/plain","size":3}],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},{"name":"Wait for response processing","time":{"start":1744126480881,"stop":1744126485886,"duration":5005},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"Verify order is no longer available","time":{"start":1744126485886,"stop":1744126485887,"duration":1},"status":"failed","statusMessage":"AssertionError: Order still exists after deletion. Returned status code: 200\nassert 200 == 404\n +  where 200 = <Response [200]>.status_code\n","statusTrace":"  File \"/home/runner/work/petstore_api_testing/petstore_api_testing/tests/test_petstore/test_store.py\", line 196, in test_delete_order\n    assert (\n","steps":[],"attachments":[{"uid":"772ebb55fdeceef1","name":"Order Still Exists","source":"772ebb55fdeceef1.json","type":"application/json","size":127}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false}],"attachments":[{"uid":"8a8c0ca2b7e738c3","name":"log","source":"8a8c0ca2b7e738c3.txt","type":"text/plain","size":1620}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":6,"attachmentsCount":6,"hasContent":true,"attachmentStep":false},"afterStages":[],"labels":[{"name":"epic","value":"Pet Store API"},{"name":"story","value":"Delete Orders"},{"name":"feature","value":"Store Management"},{"name":"tag","value":"positive"},{"name":"parentSuite","value":"tests.test_petstore"},{"name":"suite","value":"test_store"},{"name":"subSuite","value":"TestStore"},{"name":"host","value":"fv-az1970-26"},{"name":"thread","value":"2286-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_petstore.test_store"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"tags":["positive"]},"source":"2b9d7b67078e77b8.json","parameterValues":[]}