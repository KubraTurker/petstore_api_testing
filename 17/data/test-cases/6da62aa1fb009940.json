{"uid":"6da62aa1fb009940","name":"Get pet by ID","fullName":"tests.test_petstore.test_pet.TestPet#test_get_pet_by_id","historyId":"1622ff18eaa86264877fc722d398247c","time":{"start":1744126732250,"stop":1744126742520,"duration":10270},"description":"\n        Test for retrieving a pet by ID.\n        Steps:\n            1. Create a new pet object.\n            2. Add pet to the store.\n            3. Retrieve the pet by its ID using a retry mechanism.\n            4. Assert that the response status code is 200.\n            5. Assert that the retrieved pet has the same ID and name.\n        ","descriptionHtml":"<pre><code>    Test for retrieving a pet by ID.\n    Steps:\n        1. Create a new pet object.\n        2. Add pet to the store.\n        3. Retrieve the pet by its ID using a retry mechanism.\n        4. Assert that the response status code is 200.\n        5. Assert that the retrieved pet has the same ID and name.\n</code></pre>\n","status":"failed","statusMessage":"AssertionError: Pet name mismatch\nassert 'doggie' == 'Stephen'\n  \n  - Stephen\n  + doggie","statusTrace":"self = <test_pet.TestPet object at 0x7fc637c03640>\napp = <fixtures.app.Application object at 0x7fc637c38eb0>\n\n    @pytest.mark.positive\n    @allure.story(\"Retrieve Pets\")\n    @allure.title(\"Get pet by ID\")\n    def test_get_pet_by_id(self, app):\n        \"\"\"\n        Test for retrieving a pet by ID.\n        Steps:\n            1. Create a new pet object.\n            2. Add pet to the store.\n            3. Retrieve the pet by its ID using a retry mechanism.\n            4. Assert that the response status code is 200.\n            5. Assert that the retrieved pet has the same ID and name.\n        \"\"\"\n        with allure.step(\"Create and add a new pet\"):\n            data = Pet.random()\n            res_add = app.pet_api.add_pet(data=data, type_response=Pet)\n            assert res_add.status_code == 200, \"Failed to add pet\"\n            allure.attach(\n                str(res_add.data.__dict__),\n                \"Created Pet Data\",\n                allure.attachment_type.TEXT,\n            )\n            time.sleep(10)\n    \n        @allure.step(\"Wait for pet to appear with ID {pet_id}\")\n        def wait_for_pet_to_appear(pet_id, retries=5, delay=1):\n            for attempt in range(retries):\n                allure.attach(\n                    f\"Attempt {attempt + 1}/{retries}\",\n                    \"Retry Information\",\n                    allure.attachment_type.TEXT,\n                )\n                res_get = app.pet_api.get_by_id_pet(pet_id=pet_id, type_response=Pet)\n                if res_get.status_code == 200:\n                    return res_get\n                time.sleep(delay)\n            return res_get\n    \n        with allure.step(f\"Retrieve pet with ID {res_add.data.id}\"):\n            res_get = wait_for_pet_to_appear(res_add.data.id)\n            allure.attach(\n                str(res_get.__dict__), \"Get Pet Response\", allure.attachment_type.TEXT\n            )\n    \n        with allure.step(\"Verify response status code is 200\"):\n            assert res_get.status_code == 200, \"Get request failed\"\n    \n        with allure.step(\"Verify retrieved data is a Pet object\"):\n            assert isinstance(res_get.data, Pet), \"Response data is not a Pet object\"\n    \n        with allure.step(\"Verify pet ID matches\"):\n            assert res_get.data.id == res_add.data.id, \"Pet ID mismatch\"\n    \n        with allure.step(\"Verify pet name matches\"):\n>           assert res_get.data.name == data.name, \"Pet name mismatch\"\nE           AssertionError: Pet name mismatch\nE           assert 'doggie' == 'Stephen'\nE             \nE             - Stephen\nE             + doggie\n\ntests/test_petstore/test_pet.py:134: AssertionError","flaky":false,"newFailed":true,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_session_faker","time":{"start":1744126731758,"stop":1744126731759,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"app","time":{"start":1744126731759,"stop":1744126731759,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"description":"\n        Test for retrieving a pet by ID.\n        Steps:\n            1. Create a new pet object.\n            2. Add pet to the store.\n            3. Retrieve the pet by its ID using a retry mechanism.\n            4. Assert that the response status code is 200.\n            5. Assert that the retrieved pet has the same ID and name.\n        ","status":"failed","statusMessage":"AssertionError: Pet name mismatch\nassert 'doggie' == 'Stephen'\n  \n  - Stephen\n  + doggie","statusTrace":"self = <test_pet.TestPet object at 0x7fc637c03640>\napp = <fixtures.app.Application object at 0x7fc637c38eb0>\n\n    @pytest.mark.positive\n    @allure.story(\"Retrieve Pets\")\n    @allure.title(\"Get pet by ID\")\n    def test_get_pet_by_id(self, app):\n        \"\"\"\n        Test for retrieving a pet by ID.\n        Steps:\n            1. Create a new pet object.\n            2. Add pet to the store.\n            3. Retrieve the pet by its ID using a retry mechanism.\n            4. Assert that the response status code is 200.\n            5. Assert that the retrieved pet has the same ID and name.\n        \"\"\"\n        with allure.step(\"Create and add a new pet\"):\n            data = Pet.random()\n            res_add = app.pet_api.add_pet(data=data, type_response=Pet)\n            assert res_add.status_code == 200, \"Failed to add pet\"\n            allure.attach(\n                str(res_add.data.__dict__),\n                \"Created Pet Data\",\n                allure.attachment_type.TEXT,\n            )\n            time.sleep(10)\n    \n        @allure.step(\"Wait for pet to appear with ID {pet_id}\")\n        def wait_for_pet_to_appear(pet_id, retries=5, delay=1):\n            for attempt in range(retries):\n                allure.attach(\n                    f\"Attempt {attempt + 1}/{retries}\",\n                    \"Retry Information\",\n                    allure.attachment_type.TEXT,\n                )\n                res_get = app.pet_api.get_by_id_pet(pet_id=pet_id, type_response=Pet)\n                if res_get.status_code == 200:\n                    return res_get\n                time.sleep(delay)\n            return res_get\n    \n        with allure.step(f\"Retrieve pet with ID {res_add.data.id}\"):\n            res_get = wait_for_pet_to_appear(res_add.data.id)\n            allure.attach(\n                str(res_get.__dict__), \"Get Pet Response\", allure.attachment_type.TEXT\n            )\n    \n        with allure.step(\"Verify response status code is 200\"):\n            assert res_get.status_code == 200, \"Get request failed\"\n    \n        with allure.step(\"Verify retrieved data is a Pet object\"):\n            assert isinstance(res_get.data, Pet), \"Response data is not a Pet object\"\n    \n        with allure.step(\"Verify pet ID matches\"):\n            assert res_get.data.id == res_add.data.id, \"Pet ID mismatch\"\n    \n        with allure.step(\"Verify pet name matches\"):\n>           assert res_get.data.name == data.name, \"Pet name mismatch\"\nE           AssertionError: Pet name mismatch\nE           assert 'doggie' == 'Stephen'\nE             \nE             - Stephen\nE             + doggie\n\ntests/test_petstore/test_pet.py:134: AssertionError","steps":[{"name":"Create and add a new pet","time":{"start":1744126732250,"stop":1744126742469,"duration":10219},"status":"passed","steps":[],"attachments":[{"uid":"4a54f1bb6be4d2f9","name":"Created Pet Data","source":"4a54f1bb6be4d2f9.txt","type":"text/plain","size":167}],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},{"name":"Retrieve pet with ID 9223372036854750495","time":{"start":1744126742469,"stop":1744126742519,"duration":50},"status":"passed","steps":[{"name":"Wait for pet to appear with ID 9223372036854750495","time":{"start":1744126742469,"stop":1744126742519,"duration":50},"status":"passed","steps":[],"attachments":[{"uid":"aa89a84754559d0","name":"Retry Information","source":"aa89a84754559d0.txt","type":"text/plain","size":11}],"parameters":[{"name":"pet_id","value":"9223372036854750495"},{"name":"retries","value":"5"},{"name":"delay","value":"1"}],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false}],"attachments":[{"uid":"85e5ffe102416ac","name":"Get Pet Response","source":"85e5ffe102416ac.txt","type":"text/plain","size":1126}],"parameters":[],"shouldDisplayMessage":false,"stepsCount":1,"attachmentsCount":2,"hasContent":true,"attachmentStep":false},{"name":"Verify response status code is 200","time":{"start":1744126742519,"stop":1744126742519,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"Verify retrieved data is a Pet object","time":{"start":1744126742519,"stop":1744126742519,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"Verify pet ID matches","time":{"start":1744126742519,"stop":1744126742519,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"Verify pet name matches","time":{"start":1744126742519,"stop":1744126742519,"duration":0},"status":"failed","statusMessage":"AssertionError: Pet name mismatch\nassert 'doggie' == 'Stephen'\n  \n  - Stephen\n  + doggie\n","statusTrace":"  File \"/home/runner/work/petstore_api_testing/petstore_api_testing/tests/test_petstore/test_pet.py\", line 134, in test_get_pet_by_id\n    assert res_get.data.name == data.name, \"Pet name mismatch\"\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[{"uid":"9d70a8f78db4c055","name":"log","source":"9d70a8f78db4c055.txt","type":"text/plain","size":1244}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":7,"attachmentsCount":4,"hasContent":true,"attachmentStep":false},"afterStages":[],"labels":[{"name":"feature","value":"Pet Management"},{"name":"epic","value":"Pet Store API"},{"name":"story","value":"Retrieve Pets"},{"name":"tag","value":"positive"},{"name":"parentSuite","value":"tests.test_petstore"},{"name":"suite","value":"test_pet"},{"name":"subSuite","value":"TestPet"},{"name":"host","value":"fv-az1393-131"},{"name":"thread","value":"2253-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_petstore.test_pet"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":1,"broken":0,"skipped":0,"passed":1,"unknown":0,"total":2},"items":[{"uid":"e20d47b82ce1b1fc","reportUrl":"https://KubraTurker.github.io/petstore_api_testing/16//#testresult/e20d47b82ce1b1fc","status":"passed","time":{"start":1744126436295,"stop":1744126446618,"duration":10323}}]},"tags":["positive"]},"source":"6da62aa1fb009940.json","parameterValues":[]}